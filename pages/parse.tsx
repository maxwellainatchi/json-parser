import React, { useEffect } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import JSONValue, { JSONObject, JSONPrimitive } from "../utility/jsonValue";
import json from "../Bloomberg-jobs.json";
import { CollectionShape, RecordShape, Shape } from "../models/Shape";

enum ShapePreference {
  string = "String",
}

const PrimitiveDisplay: React.FC<{ value: JSONPrimitive; shape: Shape }> = ({
  value,
  shape,
}) => {
  if (typeof value === "boolean") {
    return <>{value ? "✅" : "❌"}</>;
  }
  return <>{JSON.stringify(value)}</>;
};

const ArrayDisplay: React.FC<{
  value: JSONValue[];
  shape: CollectionShape;
}> = ({ value, shape }) => {
  return (
    <>
      {value.map((value, index) => (
        <div key={index}>{ValueDisplay(value, shape.derivedShape)}</div>
      ))}
    </>
  );
};

const ObjectDisplay: React.FC<{ value: JSONObject; shape: RecordShape }> = ({
  value,
  shape,
}) => {
  return (
    <>
      {Object.entries(value).map(([key, value]) => {
        let field = shape.fields.get(key)!;
        return (
          <div key={key} style={{ paddingLeft: "30px" }}>
            <span>
              {key} (expected {Shape.typeToName[field.type]})
            </span>
            : <span>{ValueDisplay(value, field)}</span>
          </div>
        );
      })}
    </>
  );
};

const isJSONObject = (val: JSONValue): val is JSONObject =>
  typeof val === "object" && !!val && !Array.isArray(val);

const ValueDisplay = (
  value: JSONValue,
  shape: Shape
): React.ReactElement<{ value: JSONValue; shape: Shape }> | null => {
  if (Array.isArray(value)) {
    if (shape instanceof CollectionShape) {
      return <ArrayDisplay value={value} shape={shape} />;
    }
    return null;
  }
  if (isJSONObject(value)) {
    if (shape instanceof RecordShape) {
      return <ObjectDisplay value={value} shape={shape} />;
    }
    return null;
  }
  return <PrimitiveDisplay value={value} shape={shape} />;
};

const Parse: React.FC<{ json: JSONValue }> = ({ json }) => {
  let [shape] = useState<Shape>(Shape.parse(json));

  return (
    <div
      style={{
        display: "grid",
        gridTemplateColumns: "repeat(2, auto)",
        // width: "fit-content",
        gap: "10px",
        margin: "10px",
        maxHeight: "100%",
      }}
    >
      <div></div>
      {/*<div*/}
      {/*  style={{*/}
      {/*    display: "grid",*/}
      {/*    gridTemplateColumns: "repeat(2, auto)",*/}
      {/*    width: "fit-content",*/}
      {/*    height: "min-content",*/}
      {/*    gap: "10px",*/}
      {/*  }}*/}
      {/*>*/}
      {/*  {shape.recursiveFields().map((o) => (*/}
      {/*    <>*/}
      {/*      <select key={o.name + ":select"}>*/}
      {/*        {Object.entries(ShapePreference).map(([key, name]) => (*/}
      {/*          <option key={key} value={key}>*/}
      {/*            {name}*/}
      {/*          </option>*/}
      {/*        ))}*/}
      {/*      </select>*/}
      {/*      <div key={o.name}>{o.name}</div>*/}
      {/*    </>*/}
      {/*  ))}*/}
      {/*</div>*/}
      <div style={{ overflow: "auto", maxHeight: "100vh" }}>
        <div>{ValueDisplay(json, shape)}</div>
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  const [page, setPage] = useState(0);
  const [object, setObject] = useState<JSONValue | undefined>();

  return (
    <div className={styles.container} style={{ maxHeight: "100%" }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Parse json={json} />
    </div>
  );
};

export default Home;
