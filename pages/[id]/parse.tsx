import React, { useEffect } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../../styles/Home.module.css";
import { useState } from "react";
import JSONValue, { JSONObject, JSONPrimitive } from "../../utility/jsonValue";
import { CollectionShape, RecordShape, Shape } from "../../models/Shape";
import useLiveQuery from "../../utility/hooks/useLiveQuery";
import { useRouter } from "next/router";
import Application from "../../models/Application";
import { Card, Container } from "@nextui-org/react";

const ParsePage: NextPage = () => {
  const [jsonObject, setJsonObject] = useState<JSONValue>();

  const router = useRouter();
  const { id: idString } = router.query as { id?: string };
  const id = (idString && parseInt(idString)) ?? undefined;

  const application = useLiveQuery(
    () => (id ? Application.fetch(id).then((a) => a ?? null) : undefined),
    [id]
  );

  useEffect(() => {
    (async () => {
      if (!application) return;
      let files = await application.exampleFiles.get();
      let file = [...files][0];
      setJsonObject(JSON.parse(file.content));
    })();
  }, [application]);

  return (
    <Container style={{ marginTop: "1em", maxWidth: "800px" }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Card>
        {application ? (
          <div>
            {application.name}
            {application.baseShape.recursiveFields().map((field) => (
              <div key={field.name}>
                {field.name}: {field.shape.typeName}
              </div>
            ))}
            {/*{jsonObject ? (*/}
            {/*  <div>{JSON.stringify(jsonObject)}</div>*/}
            {/*) : (*/}
            {/*  "loading..."*/}
            {/*)}*/}
          </div>
        ) : application === undefined ? (
          "loading..."
        ) : (
          "No such application."
        )}
      </Card>
    </Container>
  );
};

export default ParsePage;
