import React, { useEffect, useState } from "react";
import JSONValue, { JSONObject, JSONPrimitive } from "../../utility/jsonValue";
import { CollectionShape, RecordShape, Shape } from "../../models/Shape";
import { NextPage } from "next";
import { Container } from "@nextui-org/react";
import styles from "../../styles/Home.module.css";
import Head from "next/head";
import { useRouter } from "next/router";
import useLiveQuery from "../../utility/hooks/useLiveQuery";
import DB from "../../models/db";

const PrimitiveDisplay: React.FC<{ value: JSONPrimitive; shape: Shape }> = ({
  value,
  shape,
}) => {
  if (typeof value === "boolean") {
    return <>{value ? "✅" : "❌"}</>;
  }
  return <>{JSON.stringify(value)}</>;
};

const ArrayDisplay: React.FC<{
  value: JSONValue[];
  shape: CollectionShape;
}> = ({ value, shape }) => {
  return (
    <div
      style={{ overflow: "auto", maxHeight: "400px", border: "1px solid grey" }}
    >
      {value.map((value, index) => (
        <div
          key={index}
          style={{
            border: "1px solid black",
            borderRadius: "5px",
            margin: "10px",
            padding: "10px",
          }}
        >
          {ValueDisplay(value, shape.derivedShape)}
        </div>
      ))}
    </div>
  );
};

const ObjectDisplay: React.FC<{ value: JSONObject; shape: RecordShape }> = ({
  value,
  shape,
}) => {
  return (
    <div style={{ border: "1px solid lightgrey", marginLeft: "30px" }}>
      {Object.entries(value).map(([key, value]) => {
        let field = shape.fields.get(key)!;
        return (
          <div key={key}>
            <span>
              {key} <code>[{Shape.typeToName[field.type]}]</code>
            </span>
            : <span>{ValueDisplay(value, field)}</span>
          </div>
        );
      })}
    </div>
  );
};

const isJSONObject = (val: JSONValue): val is JSONObject =>
  typeof val === "object" && !!val && !Array.isArray(val);

const ValueDisplay = (
  value: JSONValue,
  shape: Shape
): React.ReactElement<{ value: JSONValue; shape: Shape }> | null => {
  if (Array.isArray(value)) {
    if (shape instanceof CollectionShape) {
      return <ArrayDisplay value={value} shape={shape} />;
    }
    return null;
  }
  if (isJSONObject(value)) {
    if (shape instanceof RecordShape) {
      return <ObjectDisplay value={value} shape={shape} />;
    }
    return null;
  }
  return <PrimitiveDisplay value={value} shape={shape} />;
};

const Display: React.FC<{ json: JSONValue }> = ({ json }) => {
  let [shape] = useState<Shape>(Shape.parse(json));
  return (
    <div style={{ overflow: "auto", maxHeight: "100vh" }}>
      <div>{ValueDisplay(json, shape)}</div>
    </div>
  );
};

const DisplayPage: NextPage = () => {
  const [jsonObject, setJsonObject] = useState<JSONValue>();

  const router = useRouter();
  const { id: idString } = router.query as { id?: string };
  const id = (idString && parseInt(idString)) ?? undefined;

  const jsonFile = useLiveQuery(
    () => (id ? DB.files.get({ id }) : undefined),
    [id]
  );

  useEffect(() => {
    if (jsonFile) {
      setJsonObject(JSON.parse(jsonFile.content));
    }
  }, [jsonFile]);

  return (
    <div
      className={styles.container}
      style={{ maxHeight: "100%", padding: "10px" }}
    >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {jsonObject ? <Display json={jsonObject} /> : "Loading..."}
    </div>
  );
};

export default DisplayPage;
